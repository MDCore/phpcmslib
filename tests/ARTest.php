<?php
// Call ARTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) { define('PHPUnit_MAIN_METHOD', 'ARTest::main');
}

require_once 'PHPUnit/Framework.php';

require_once '../AR.php';
require_once '../functions.php';
require_once 'MDB2.php';

#test models
require_once 'models.php';

/**
 * Test class for AR.
 * Generated by PHPUnit on 2007-07-08 at 06:41:35.
 */
class ARTest extends PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */

    private $customer_model_object = null;

    public static function main() {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('ARTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    public function __construct()
    {
        $dsn = array(
            'phptype' => 'mysql',
            'username' => 'root',
            'password' => '',
            'hostspec' => 'localhost'
        );
        $this->db =& MDB2::Connect($dsn);
        App::error_check($this->db);
        
        $this->db->query('DROP DATABASE IF EXISTS ARTest');
        $this->db->query('CREATE DATABASE ARTest');
        App::error_check($this->db);
        #setup the customer_table
            $this->db->query("
            CREATE TABLE ARTest.customers (
              `id` int(11) NOT NULL auto_increment,
              `created_on` datetime NOT NULL,
              `updated_on` datetime NOT NULL,
              `name` varchar(255) NOT NULL,
              `company_name` varchar(255) NOT NULL,
              `address` text NOT NULL,
              `active` char(1) NOT NULL default 'Y',
              PRIMARY KEY  (`id`)
              ) ENGINE=MyISAM DEFAULT CHARSET=latin1;"
            );
        App::error_check($this->db);

    }
    public function __destruct()
    {
        #$this->db->query('DROP DATABASE IF EXISTS ARTest');
        unset($this->db);
    }
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {

       #echo "setup\r\n"; 
        #customer fixtures
            $this->db->query("INSERT INTO customers (name, company_name, address, active) VALUES ('cust 1', 'company 1', 'address 1', 'Y')");
            App::error_check($this->db);
            $this->customer_model_object = new customer;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
       #echo "teardown\r\n"; 
        $this->db->query('TRUNCATE TABLE customers;');
        $this->customer_model_object = null;
    }

    /**
     * @todo Implement testConnect_to_db().
     */
    public function testConnect_to_db() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetup_attributes().
     */
    public function testSetup_attributes() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement test__call().
     */
    public function test__call() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement test__get().
     */
    public function test__get() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCreate().
     */
    public function testCreate() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    public function test_find_returns_correct_value()
    {
        $this->assertTrue($this->customer_model_object->find(1));
        $this->assertFalse($this->customer_model_object->find(999));

        $this->customer_model_object->find(1);
        $this->assertEquals(1, $this->customer_model_object->id);

        $this->customer_model_object->find(999);
        $this->assertEquals(null, $this->customer_model_object->id);
    }

    public function test_update_checks_for_target_record_first()
    {
        $this->customer_model_object->find(999);
        $this->assertFalse($this->customer_model_object->update());
    }
    /**
     * testUpdate().
     */
    public function testUpdate() {
        
        $this->customer_model_object->find(1);
        $this->customer_model_object->name = 'new customer';
        $this->assertTrue($this->customer_model_object->update());

        $test_model = new customer;
        $test_model->find(1);
        $this->assertEquals('new customer', $test_model->name);

        #cleanup
            $test_model = null;
    }

    public function test_should_not_update_if_not_linked_to_a_record()
    {
        $this->markTestIncomplete();
    }

    /**
     * @todo Implement testSave().
     */
    public function testSave() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSave_multiple().
     */
    public function testSave_multiple() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testDelete_by_sql().
     */
    public function testDelete_by_sql() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testDelete().
     */
    public function testDelete() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSave_changelog().
     */
    public function testSave_changelog() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testDelete_changelog().
     */
    public function testDelete_changelog() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testWrite_value_changes().
     */
    public function testWrite_value_changes() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testFind_by_sql().
     */
    public function testFind_by_sql() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testFind().
     */
    public function testFind() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testHas_attribute().
     */
    public function testHas_attribute() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testUpdate_attributes().
     */
    public function testUpdate_attributes() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testClear_attributes().
     */
    public function testClear_attributes() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testAs_array().
     */
    public function testAs_array() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testAs_select_options().
     */
    public function testAs_select_options() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testHas_one().
     */
    public function testHas_one() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testThrough_model().
     */
    public function testThrough_model() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testHas_many_through().
     */
    public function testHas_many_through() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRequirements().
     */
    public function testRequirements() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIs_valid().
     */
    public function testIs_valid() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCriteria_to_sql().
     */
    public function testCriteria_to_sql() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testDisplay_name().
     */
    public function testDisplay_name() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}

// Call ARTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'ARTest::main') {
    ARTest::main();
}
?>
